5. Which nation has participated in all of the olympic games
----->>>>
--------How I approached the question-------------
-- total no of olympic games
--- count of games for each country 
----- games played by the countries should be = to total no. of olympic games

with total_games as 
		(select count(distinct games) as games
		from 	OLYMPICS_HISTORY),
	 no_of_games_by_countries as
		(select  distinct noc as country, count(distinct games) as no_of_games
		from	olympics_history h
		group	by 1)
select 	r.region, no_of_games
from 	no_of_games_by_countries c
join	total_games t
on	c.no_of_games = t.games
join 	olympics_history_noc_regions r
on	c.country=r.noc

----------------              --------------------------

6. Identify the sport which was played in all summer olympics.
--->>>>>>

-- find the total no. of summer olympic held.
--- find the total count of all the sports in summer olympic and which are equal to the total no. of summer olympic those are ans


with summer_games as 	
		(select count(distinct games) as total_games
		from	olympics_history
		where	season = 'Summer'),
	 sports_in_all_season as 
	 	(select distinct sport as sport, count(distinct games) as no_of_season
		 from	olympics_history
		 where	season = 'Summer'
		 group	by 1)
		
select  sport, no_of_season as no_of_olympic_playes, total_games
from	sports_in_all_season s
join	summer_games g
on		s.no_of_season=g.total_games

------------------          ---------------------------

7. Which Sports were just played only once in the olympics
---->>>>>>>>>
with games_played as
		(select  distinct sport, count( distinct games) as total_games_played
		 from	 olympics_history
		 group	 by 1)
select  *
from	games_played
where	total_games_played=1

------------------               ----------------------

8. Fetch the total no of sports played in each olympic games.
-------->>>>>.

select  distinct games, count(distinct sport) as sports_played
from	olympics_history
group	by 1
order	by 1

----------------                   -----------------

9. Fetch oldest athletes to win a gold medal
--------->>>>>>
 
with age_category as
		(select	*, rank() over(partiton by age order by age desc) as rnk
		from	olympics_history
		where	age is not null and medal='Gold'	)
select 	*
from	age_category
where	rnk=1

----------------                      -----------------------

10. Find the Ratio of male and female athletes participated in all olympic games. ------- iske given output me thoda issue lga, kyuki output ek hi usme aana tha but ratio me bhi issue lga........But ye same given output ka query hai.
---->>>>>>

with no_of_athlete as
		(select  distinct games,sex,  count(distinct id) as participants
		from	olympics_history
		group	by 1,2),
	 total_male_athletes  as
		(select  sex, sum( participants) as total_participants
		from	 no_of_athlete
		where	 sex='M'
		group	by 1),
	 total_female_athletes as
		(select  sex, sum( participants) as total_participants
		from	 no_of_athlete
		where	 sex='F'
		group	by 1)
select    (round(f.total_participants/f.total_participants,2)||':'||round(m.total_participants/f.total_participants,2))as ratio
from	total_female_athletes f, total_male_athletes 

---------------------                   -----------------------

11. Fetch the top 5 athletes who have won the most gold medals.
------->>>>>

-- count of medals for each athletes with filter "Gold"
---- putting rank function for getting top five athletes who won Gold medal               ----#approach

with medal_by_player as
		(select distinct id, name, team, count(medal) as no_of_medals
		from	olympics_history
		where	medal='Gold'
		group	by 1, 2, 3
		order	by 4 desc),
	player_rank as
		(select name, team, no_of_medals, dense_rank() over(order by no_of_medals desc) rnk
		 from	medal_by_player)
select 	name, team, no_of_medals
from    player_rank
where	rnk<=5

-----------------------               ------------------------

12. Fetch the top 5 athletes who have won the most medals (gold/silver/bronze).
----------->>>>>>

--  fetching the no. of medals won by each player i.e. gold, silver, bornze
--  putting the rank on medal won by each player for getting the top 5 most medal winning player

with total_medals as 
		(select	id, name, count(medal) as medal_won
		from	olympics_history
		where	medal not in ('NA')
		group	by 1,2
		order 	by 3 desc),
	 ranking_athletes as 
	 	(select name, medal_won, dense_rank() over(order by medal_won desc) as rnk
		from	total_medals)
select  name, medal_won
from 	ranking_athletes
where	rnk<=5

-------------------------              --------------------

13. Fetch the top 5 most successful countries in olympics. Success is defined by no of medals won.
-------->>>>>>>>>

with country_won_medal as
		(select  noc, count(medal)as medal_won
		from	olympics_history
		where	medal not in ('NA') 
		group	by 1
		order 	by 2 desc),
	 rank_countries as
	 	(select noc, medal_won, dense_rank() over(order by medal_won desc) as rnk
		 from	country_won_medal)
select  n.region, r.noc, medal_won, rnk
from	rank_countries r
join	olympics_history_noc_regions n
on		r.noc=n.noc
where	rnk<=5

----------------------         ------------------------------

14. List down total gold, silver and bronze medals won by each country.
------->>>>

with medal_won as
	(select  noc,
			SUM(case when medal='Gold' then 1 else 0 end) as Gold,
			SUM(case when medal='Silver' then 1 else 0 end) as Silver,
			SUM(case when medal='Bronze' then 1 else 0 end) as Bronze
	from	olympics_history
	group	by 1)
select  r.region, m.gold, m.silver, m.bronze
from	medal_won m
join	olympics_history_noc_regions r
on		m.noc=r.noc
order	by 2 desc, 3 desc, 4 desc
		

					-------------USING PIVOT TABLE------------- 


select  country, coalesce(bronze, 0)as "Bronze",coalesce(gold, 0)as "Gold",coalesce(silver, 0)as "Silver"
from	crosstab('SELECT  r.region, h.medal, count(h.medal)
				from	olympics_history h
				join	olympics_history_noc_regions r
				on		h.noc=r.noc
				where	h.medal not in (''NA'')
				group	by 1,2
				order	by 1,2',
				'values (''Bronze''), (''Gold''), (''Silver'')')
				as result (Country varchar, Bronze bigint, Gold bigint, Silver bigint)
order	by 2 desc, 3 desc, 4 desc
-------------                 ----------------

15. List down all the countries won at least 1 medal each.
-------->>>>>>
with medal_won as
	(select  noc,
			SUM(case when medal='Gold' then 1 else 0 end) as Gold,
			SUM(case when medal='Silver' then 1 else 0 end) as Silver,
			SUM(case when medal='Bronze' then 1 else 0 end) as Bronze
	from	olympics_history
	group	by 1),
	 winning as
		(select  r.region, m.gold, m.silver, m.bronze
		from	medal_won m
		join	olympics_history_noc_regions r
		on		m.noc=r.noc
		order	by 2 desc, 3 desc, 4 desc)
select *
from	winning
where	gold>0 and silver>0 and bronze>0
		
		
							OR
with gold_medal as
		(select  noc,
				count(medal) as Gold
		from olympics_history 
		where	medal = 'Gold'
		group	by 1
		order	by 2 desc),
	 silver_medal as
	 	(select  noc,
				count(medal) as Silver
		from olympics_history 
		where	medal = 'Silver'
		group	by 1
		order	by 2 desc),
	 bronze_medal as
	 	(select  noc,
				count(medal) as Bronze
		from olympics_history 
		where	medal = 'Bronze'
		group	by 1
		order	by 2 desc)

select  r.region as country, g.gold, s.silver, b.bronze
from	gold_medal g
join	silver_medal s on g.noc = s.noc
join	bronze_medal b on s.noc = b.noc
join	olympics_history_noc_regions r on g.noc=r.noc
order	by g.gold desc, s.silver desc, b.bronze desc 

-------------------                      ------------------------------

15. List down total gold, silver and bronze medals won by each country corresponding to each olympic games.
--------->>>>>

  with medal_won_each_olympic as
	(select	games, noc, 
			sum(case when medal='Gold' then 1 else 0 end) as gold,
			sum(case when medal='Silver' then 1 else 0 end) as Silver,
			sum(case when medal='Bronze' then 1 else 0 end) as Bronze
	from 	olympics_history
	group	by 1,2)
Select  m.games, r.region, m.gold, m.silver, m.bronze
from	medal_won_each_olympic m
join	olympics_history_noc_regions r
on		m.noc=r.noc
order 	by 1, 2

----------------------                 ---------------------

16. Identify which country won the most gold, most silver and most bronze medals in each olympic games.
--------->>>>>>>


with medal_won as
	(select  h.games , r.region as country,
			sum(case when medal='Gold' then 1 else 0 end) as Gold,
			sum(case when medal='Bronze' then 1 else 0 end) as Bronze,
			sum(case when medal='Silver' then 1 else 0 end) as Silver
	from	olympics_history h
	join	olympics_history_noc_regions r
	on		h.noc=r.noc
	group	by 1,2
	order 	by 1, 2)

select  distinct games, 
		(first_value(country) over( partition by games order by gold desc) 
		 || '-' ||
		 first_value(gold) over( partition by games order by gold desc)) as gold,
		(first_value(country) over (partition by games order by silver desc) 
		 ||'-'||
		 first_value(silver) over (partition by games order by silver desc)) as silver,
		(first_value(country) over (partition by games order by bronze desc) 
		 ||'-'||
		 first_value(bronze) over (partition by games order by bronze desc)) as Bronze
from	medal_won
order 	by 1

------------------------               -------------------------

17. Identify which country won the most gold, most silver, most bronze medals and the most medals in each olympic games.
------>>>>>>


with medal_won as
	(select  h.games , r.region as country,
			sum(case when medal='Gold' then 1 else 0 end) as Gold,
			sum(case when medal='Bronze' then 1 else 0 end) as Bronze,
			sum(case when medal='Silver' then 1 else 0 end) as Silver,
	 		sum(case when medal<>'NA' then 1 else 0 end) as total_medals
	from	olympics_history h
	join	olympics_history_noc_regions r
	on		h.noc=r.noc
	group	by 1,2
	order 	by 1, 2)

select  distinct games, 
		(first_value(country) over( partition by games order by gold desc) 
		 || '-' ||
		 first_value(gold) over( partition by games order by gold desc)) as gold,
		(first_value(country) over (partition by games order by silver desc) 
		 ||'-'||
		 first_value(silver) over (partition by games order by silver desc)) as silver,
		(first_value(country) over (partition by games order by bronze desc) 
		 ||'-'||
		 first_value(bronze) over (partition by games order by bronze desc)) as Bronze,
		(first_value(country) over (partition by games order by total_medals desc) 
		 ||'-'||
		 first_value(total_medals) over (partition by games order by total_medals desc)) as Total_medals 
from	medal_won
order 	by 1;

----------------------         --------------------------------

18. Which countries have never won gold medal but have won silver/bronze medals?
-------->>>>

with medal_won as
		(select  r.region, 
				 sum(case when medal='Gold' then 1 else 0 end) as Gold,
				 sum(case when medal='Silver' then 1 else 0 end) as Silver,
				 sum(case when medal='Bronze' then 1 else 0 end) as Bronze
		 from	 olympics_history h
		 join	 olympics_history_noc_regions r
		 on	 	 r.noc=h.noc
		 group	 by 1)
select  *
from	medal_won
where	gold=0 and (silver>0 or bronze>0)

							--------------- OR --------------

select * from (
    	SELECT country, coalesce(gold,0) as gold, coalesce(silver,0) as silver, coalesce(bronze,0) as bronze
    		FROM CROSSTAB('SELECT nr.region as country
    					, medal, count(medal) as total_medals
    					FROM OLYMPICS_HISTORY oh
    					JOIN OLYMPICS_HISTORY_NOC_REGIONS nr ON nr.noc=oh.noc
    					where medal <> ''NA''
    					GROUP BY nr.region,medal order BY nr.region,medal',
                    'values (''Bronze''), (''Gold''), (''Silver'')')
    		AS FINAL_RESULT(country varchar,
    		bronze bigint, gold bigint, silver bigint)) x
    where gold = 0 and (silver > 0 or bronze > 0)
    order by gold desc nulls last, silver desc nulls last, bronze desc nulls last;

----------------------                -----------------------

19. In which Sport/event, India has won highest medals.
---------->>>>


with india_won_medals as 
		(select  sport, count(medal) as medal_won
		from  	olympics_history h
		join	olympics_history_noc_regions r
		on		h.noc=r.noc
		where	r.region='India' and medal<>'NA'
		group	by 1),
	 medals as
		(select sport, medal_won,rank() over(order by medal_won desc) as most_medals
		from	india_won_medals)
select  sport, medal_won
from	medals
where	most_medals =1

						-------OR-------

with india_won_medals as 
		(select  sport, count(medal) as medal_won
		from  	olympics_history h
		join	olympics_history_noc_regions r
		on		h.noc=r.noc
		where	r.region='India' and medal<>'NA'
		group	by 1)
select  first_rank(sport) over (order by medal_won desc) as sports,
            first_rank(medal_won) over (order by medal_won desc) as most_medals
from   india_won_medals

						-------OR-------

select sport, count(medal) as medal_won
from   olympics_history h
join     olympics_history_noc_regions r
on       h.noc=r.noc
where  r.region ='India' and medal<>'NA'
group  by 1
order   by 2 desc
limit    1

-------------------             --------------------------------

20. Break down all olympic games where India won medal for Hockey and how many medals in each olympic games
---------->>>>>>>>>>


select  r.region as country, sport, games, count(medal) as medals_won
from	olympics_history h
join	olympics_history_noc_regions r
on		h.noc=r.noc
where	r.region='India' and medal<>'NA' and sport = 'Hockey'
group	by 1,2,3
order	by 3



-- Write only the SQL statement that solves the problem and nothing else
with region_avg_sale as
      (select r.name, coalesce(avg(s.amount),0) as avg_sales
      from    sales s
      join    employees e on s.employeeid=e.id
      join    states st on e.stateId=st.id
      right   join    regions r on st.regionId=r.id
      group   by 1),
     highest_sale as
      (select  name, round(avg_sales,0) as average, first_value(avg_sales) over(order by avg_sales desc) as max_value
       from    region_avg_sale)
select  name, average, round((max_value-average),0) as difference
from    highest_sale
